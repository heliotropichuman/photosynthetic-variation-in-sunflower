x <- x[-exclude]
y <- y[-exclude]
}
eqX <- get("eq6")
recon <- eqX(dat=data.frame(PARi=x,A=y),return = "all")
points(PARi_fine,recon$pred_fine,type='l',col='red',lwd=2)
points(PARi_fine,fit$pred_fine,type='l',col='blue',lty=2)
# cat(fit$calc[["Rd"]],recon$calc[["Rd"]],"\n")
recon
}
# dev.off()
# i=sample(length(inds),1)
for(i in 1:length(inds))
{
print(i)
jpeg(filename = paste("results/",i,".jpeg",sep=""),width = 800,height = 1000)
par(mfrow=c(3,3))
f(eq1,i)
f(eq2,i)
f(eq3,i)
f(eq4,i)
f(eq5,i)
f(eq6,i)
f(eq8,i)
f(eq9,i)
f(eq11,i)
dev.off()
}
res
results <- res[eq,,]
results
resultsavg <- apply(results, 1, mean)
resultsavg
# Create a list with species names and corresponding average observation values
species_list <- list(Species = 1:length(resultsavg), Average_Observation = resultsavg)
r
ResultReview <- list(Species = 1:length(average_observation), Average_Observation = average_observation)
ResultReview <- list(Species = 1:length(resultsavg), Average_Observation = resultsavg)
ResultReview
r2[,eq]
mse
r2[,eq]
results <- res[eq,,]
results
u
suppressWarnings(cbind(
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(mse[eq,,])[,i]
))^2,5),colnames(res)),
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(res_i_BM[eq,,])[,i]
))^2,5),colnames(res))))
suppressWarnings(cbind(
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t([eq,,])[,i]
## Phylogenetic Signal in the Curve #####
# Does photosynthetic rate at different light levels exhibit phylogenetic signal?
# test phylogenetic signal at each level
data.frame(PARi = PARi,phy_signal =
sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda))
suppressWarnings(cbind(
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(res_BM[eq,,])[,i]
))^2,5),colnames(res)),
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(res_i_BM[eq,,])[,i]
))^2,5),colnames(res))))
results <- res[eq,,]
results
?apply()
average_parameters <- apply(results, length(dat_long), mean)
r2[,eq]
# Wrangling the results into an array
res <- array(dim = c(9,length(par_names)+length(PARi),length(inds)))
dimnames(res) <- list(paste("eq",c(1:6,8:9,11),sep = ""),c(par_names,paste("PAR_",PARi,sep="")),inds)
mse <- r2 <- matrix(NA,nrow = length(inds),ncol = 9,dimnames = list(inds,eqX))
for(e in 1:9)
{
for(i in 1:length(inds))
{
try({
out <- get(eqX[e])(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")
res[e,,i] <- c(out$calc[par_names],out$pred_fine[which(PARi_fine %in% PARi)])
r2[i,e] <- out$fit[["r2"]]
mse[i,e] <- out$fit[["mse"]]
},silent = TRUE)
}
}
mse
for(i in 1:length(inds))
{
try({
out <- get(eqX[6])(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")
res[6,,i] <- c(out$calc[par_names],out$pred_fine[which(PARi_fine %in% PARi)])
r2[i,6] <- out$fit[["r2e6"]]
mse[i,6] <- out$fit[["msee6"]]
},silent = TRUE)
}
r2e6
res
results <- array(dim = c(2,length(par_names)+length(PARi),length(inds)))
dimnames(results) <- list(paste("eq6"),c(par_names,paste("PAR_",PARi,sep="")),inds)
results
mse
inds
ind
source("R/load_data.R")
inds <- unique(dat$SpeciesRepDate)
ind_species <- dat$species[match(inds,dat$SpeciesRepDate)]
## Phylogenetic Signal in the Curve #####
# Does photosynthetic rate at different light levels exhibit phylogenetic signal?
# test phylogenetic signal at each level
data.frame(PARi = PARi,phy_signal =
sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda))
dat_long=as.data.frame(dat_long)
vals <- sapply(1:length(inds),function(i) get(eq)(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")$pred_fine[PARi_fine%in%seq(0,2500,by = 50)])
a=sapply(1:nrow(vals),function(i) {
phy_fit <- phylopars(data.frame(species=ind_species,trait=vals[i,]),tree,model='lambda')
phy_fit$model$lambda
# phy_fit$pars[[1]]/(phy_fit$pars[[1]]+phy_fit$pars[[2]])
})
# plots phyogenetic signal (Pagel's lambda) across the smooth function of PARi levels, as well as the signal for the observed A at each PARi
plot(seq(0,2500,by = 50),a,type='l',ylim = c(0,1))
points(PARi,sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda),pch=19)
## Phylogenetic Signal in the Parameters #####
# Do parameters extracted from photosynthetic light response curves exhibit phylogenetic signal?
# rows = equations; columns = parameters
setNames(sapply(1:length(pars),function(i){
phylopars(data.frame(species = ind_species,trait = t(res[eq,,])[,pars[i]],row.names = NULL),tree = tree,model = 'lambda')$model$lambda
}),pars)
# left column:  prediction R2 between parameters on observed vs imputed using parameters
# right column: prediction R2 between parameters on observed vs imputed using values
suppressWarnings(cbind(
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(res_BM[eq,,])[,i]
))^2,5),colnames(res)),
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eq,,])[,i],
t(res_i_BM[eq,,])[,i]
))^2,5),colnames(res))))
inds
library(Rphylopars)
load(file = "saved_state_1_25_2024.RData")
source("R/load_data.R")
source("R/mv.R")
# The goal: Make a heat map matrix of R2 and mse for all equations
r2
mse
inds
# attempt 0
res <- array(dim = c(9,length(par_names)+length(PARi),length(inds)))
dimnames(res) <- list(paste("eq",c(1:6,8:9,11),sep = ""),c(par_names,paste("PAR_",PARi,sep="")),inds)
ErrorMatrix <- array(ErrorMatrix, dim = length(mse)+length(r2), dimnames = list(inds,eqX))
ErrorMatrix <- array(dim = c(9,length(mse)+length(r2),length(inds)))
dimnames(ErrorMatrix) <- list(paste("eq",c(1:6,8:9,11),sep = ""),c(mse, r2,inds))
eq <- "eq6"
mse[,eq]
r2[,eq]
## Phylogenetic Signal in the Curve #####
# Does photosynthetic rate at different light levels exhibit phylogenetic signal?
# test phylogenetic signal at each level
data.frame(PARi = PARi,phy_signal =
sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda))
dat_long=as.data.frame(dat_long)
vals <- sapply(1:length(inds),function(i) get(eq)(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")$pred_fine[PARi_fine%in%seq(0,2500,by = 50)])
a=sapply(1:nrow(vals),function(i) {
phy_fit <- phylopars(data.frame(species=ind_species,trait=vals[i,]),tree,model='lambda')
phy_fit$model$lambda
# phy_fit$pars[[1]]/(phy_fit$pars[[1]]+phy_fit$pars[[2]])
})
# plots phyogenetic signal (Pagel's lambda) across the smooth function of PARi levels, as well as the signal for the observed A at each PARi
plot(seq(0,2500,by = 50),a,type='l',ylim = c(0,1))
points(PARi,sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda),pch=19)
## Phylogenetic Signal in the Parameters #####
# Do parameters extracted from photosynthetic light response curves exhibit phylogenetic signal?
# rows = equations; columns = parameters
setNames(sapply(1:length(pars),function(i){
phylopars(data.frame(species = ind_species,trait = t(res[eq,,])[,pars[i]],row.names = NULL),tree = tree,model = 'lambda')$model$lambda
}),pars)
colnames(r2_impute) <- eqX
r2_impute
# prediction MSE for each parameter for each equation (using values)
mse_impute <- suppressWarnings(sapply(1:length(eqX),function(e) {
setNames(round(sapply(1:ncol(res),function(i)
{
mean((t(res[eqX[e],,])[,i] - t(res_i_BM[eqX[e],,])[,i])^2)
}),5),colnames(res))[pars]
}))
colnames(mse_impute) <- eqX
mse_impute
View(r2)
View(temp)
View(tree)
View(vals)
load(file = "saved_state_1_25_2024.RData")
View(p)
# prediction R2 for each parameter for each equation (using values)
r2_impute <- suppressWarnings(sapply(1:length(eqX),function(e) {
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eqX[e],,])[,i],
t(res_i_BM[eqX[e],,])[,i]
))^2,5),colnames(res))}))[pars,]
colnames(r2_impute) <- eqX
r2_impute
# prediction MSE for each parameter for each equation (using values)
mse_impute <- suppressWarnings(sapply(1:length(eqX),function(e) {
setNames(round(sapply(1:ncol(res),function(i)
{
mean((t(res[eqX[e],,])[,i] - t(res_i_BM[eqX[e],,])[,i])^2)
}),5),colnames(res))[pars]
}))
colnames(mse_impute) <- eqX
mse_impute
# prediction R2 for each parameter for each equation (using parameters)
r2_impute <- suppressWarnings(sapply(1:length(eqX),function(e) {
setNames(round(sapply(1:ncol(res),function(i) cor(t(
res[eqX[e],,])[,i],
t(res_BM[eqX[e],,])[,i]
))^2,5),colnames(res))}))[pars,]
colnames(r2_impute) <- eqX
r2_impute
# prediction MSE for each parameter for each equation (using parameters)
mse_impute <- suppressWarnings(sapply(1:length(eqX),function(e) {
setNames(round(sapply(1:ncol(res),function(i)
{
mean((t(res[eqX[e],,])[,i] - t(res_BM[eqX[e],,])[,i])^2)
}),5),colnames(res))[pars]
}))
colnames(mse_impute) <- eqX
mse_impute
BM_parameters <- res_BM[6,,]
BM_parameters <- as.data.frame(t(BM_parameters))
phi1 <- BM_parameters$phi_I0
phi2 <- BM_parameters$phi_I0_Icomp
phi3 <- BM_parameters$phi_Icomp
phi4 <- BM_parameters$phi_Icomp_I200
Pgmax <- BM_parameters$Pgmax
Icomp <- BM_parameters$Icomp
Rd <- BM_parameters$Rd
PAR_2500 <- BM_parameters$PAR_2500
Imax <- BM_parameters$Imax
Imax <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = Imax))[,1])
plot(Imax_ContMap,fsize = c(.5,.5),leg.txt="Imax")
Imax <- BM_parameters$Imax
Imax_ContMap <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = Imax))[,1])
plot(Imax_ContMap,fsize = c(.5,.5),leg.txt="Imax")
res_Imax <- measured_parameters$Imax
measured_parameters <- res[6,,]
measured_parameters <- as.data.frame(t(measured_parameters))
res_Imax <- measured_parameters$Imax
res_Imax <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = res_Imax))[,1])
plot(res_PAR_2500_ContMap,fsize = c(.5,.5),leg.txt="Imax")
res_Imax <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = res_Imax))[,1])
res_Imax <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = res_Imax))[,1])
res_Imax <- measured_parameters$Imax
res_Imax_ContMap <- phytools::contMap(tree,Rphylopars:::convert_to_means(data.frame(species = ind_species,rank = res_Imax))[,1])
plot(res_Imax_ContMap,fsize = c(.5,.5),leg.txt="Imax")
# treat A at each PARi level as a "trait"
PARi <- c(0, 50, 100, 250, 500, 1000, 1500, 2000, 2500)
PARi_fine <- seq(0,2500,length=500)
species_and_nodes <- anc_recon$species
View(BM_mv_anc_recon_upper)
## Making Correlations ####
m2016a <- read.xlsx(file = "R/processed_data/mason_data.xlsx",sheetName = "m2016a")
library(xlsx)
## Making Correlations ####
m2016a <- read.xlsx(file = "R/processed_data/mason_data.xlsx",sheetName = "m2016a")
## Making Correlations ####
m2016a <- read.xlsx(file = "processed_data/mason_data.xlsx",sheetName = "m2016a")
m2016a_nozero <- read.xlsx(file = "processed_data/mason_data.xlsx",sheetName = "m2016a_nozero")
get_cors <- function(dataset,use_minR2 = TRUE)
{
photodat <- data.frame(species = tree$tip.label,Rd_from_coefs = Rd_from_coefs[tree$tip.label],Rd_from_values = Rd_from_values[tree$tip.label],Amax_from_coefs = Amax_from_coefs[tree$tip.label],Amax_from_values = Amax_from_values[tree$tip.label],phi_from_coefs = phi_from_coefs[tree$tip.label],Icomp_from_coefs = Icomp_from_coefs[tree$tip.label])
dataset <- merge(photodat,dataset,by="species")
rownames(dataset) <- dataset$species
cor_results <- data.frame(photo_trait = character(),predictor = character(),photo_col = numeric(),predictor_col = numeric(),R2 = numeric(),minR2 = numeric(),pval = numeric(),slope = numeric(),intercept = numeric(),lambda = numeric())
library(phylolm)
for(i in 2:ncol(photodat))
{
for(j in (ncol(photodat)+1):(ncol(dataset)))
{
if(colnames(dataset)[j]=="growth_form") break
mod <- phylolm(as.formula(paste(colnames(dataset)[i],"~",colnames(dataset)[j])),phy=tree,data=dataset,model='lambda')
if(mod$r.squared>.25)
{
minR2 <- round(min(sapply(dataset[!is.na(dataset[,j]),"species"],function(tip) phylolm(as.formula(paste(colnames(dataset)[i],"~",colnames(dataset)[j])),phy=drop.tip(tree,tip),data=dataset,model='lambda')$r.squared)),3)
if(use_minR2) if(minR2 < .25) next
if(!use_minR2) if(mod$r.squared < .25) next
cor_results <- rbind(cor_results,
data.frame(photo_trait = colnames(dataset)[i],predictor = colnames(dataset)[j],photo_col = i,predictor_col = j,R2 = round(mod$r.squared,3),minR2 = minR2,pval = round(summary(mod)$coef[2,4],5),slope = round(mod$coefficients[2],7),intercept = round(mod$coefficients[1],4),lambda = round(mod$optpar,2)))
plot(dataset[,j],dataset[,i],xlab = colnames(dataset)[j],ylab = colnames(dataset)[i],pch=19,main=paste("R2 =",round(mod$r.squared,3),"- minR2 =",minR2))
abline(mod)
}
}
}
cor_results
}
load(file = "saved_state_1_25_2024.RData")
source("R/load_data.R")
source("R/mv.R")
photodat <- data.frame(species = tree$tip.label,Rd_from_coefs = Rd_from_coefs[tree$tip.label],Rd_from_values = Rd_from_values[tree$tip.label],Amax_from_coefs = Amax_from_coefs[tree$tip.label],Amax_from_values = Amax_from_values[tree$tip.label],phi_from_coefs = phi_from_coefs[tree$tip.label],Icomp_from_coefs = Icomp_from_coefs[tree$tip.label])
# Start with the following code for resuiming analysis, and skip to line 1445
load(file = "saved_state_1_25_2024.RData")
library(Rphylopars)
source("R/load_data.R")
source("R/mv.R")
##### Answering Questions #####
# Which model type best fits photosynthetic light response curves in sunflowers?
# fit 9 different model types; table comparing average mse and r2; representative figure
eq <- "eq6"
mse[,eq]
res
library(Rphylopars)
library(xlsx)
load(file = "saved_state_1_25_2024.RData")
source("R/load_data.R")
source("R/mv.R")
# treat A at each PARi level as a "trait"
PARi <- c(0, 50, 100, 250, 500, 1000, 1500, 2000, 2500)
PARi_fine <- seq(0,2500,length=500)
species_and_nodes <- anc_recon$species
lightcurve <- function(pars,PARi)
{
pars <- as.numeric(pars)
phi <- pars[1]
beta <- pars[2]
gamma <- pars[3]
Icomp <- pars[4]
phi*((1-beta*PARi)/(1+gamma*PARi))*(PARi-Icomp)
}
LH <- data.frame(species = c("H.agrestis", "H.annuus", "H.argophyllus", "H.atrorubens",
"H.cusickii", "H.debilis", "H.divaricatus", "H.floridanus", "H.giganteus",
"H.gracilentus", "H.grosseserratus", "H.heterophyllus", "H.longifolius",
"H.maximiliani", "H.microcephalus", "H.mollis", "H.neglectus",
"H.nuttalliissp.nuttallii", "H.occidentalis", "H.petiolaris",
"H.praecox", "H.radula", "H.silphioides", "H.winteri"),
clade = c("NA", "A", "A", "SE", "LP", "A", "LP", "SE", "LP", "P", "LP",
"SE", "SE", "LP", "LP", "SE", "A", "LP", "P", "A", "A", "SE",
"SE", "A"),
lifehist_2cats = c("A", "A", "A", "P", "P", "A", "P", "P", "P", "P", "P", "P",
"P", "P", "P", "P", "A", "P", "P", "A", "A", "P", "P", "A"),
lifehist_3cats = c("A", "A", "A", "SE", "LP", "A", "LP", "SE", "LP", "P", "LP",
"SE", "SE", "LP", "LP", "SE", "A", "LP", "P", "A", "A", "SE",
"SE", "A"), #replace ) with , to include lifehist_4cats
lifehist_4cats = c("Annual", "Annual", "Annual", "Erect Perennial", "Erect Perennial", "Annual", "Erect Perennial", "Erect Perennial", "Erect Perennial", "Erect Perennial", "Erect Perennial", "Basal Rosette",
"Basal Rosette", "Erect Perennial", "Erect Perennial", "Erect Perennial", "Annual", "Erect Perennial", "Basal Rosette", "Annual", "Annual", "Basal Rosette", "Erect Perennial", "Annual"))
### Plot NLS ####
plot_curve <- function(current_node,values = TRUE,col = "black",lwd = 3,type = 'l',lty = 1,add = FALSE,anc_recon = BM_mv_anc_recon)
{
if(values)
{
current_A <- as.numeric(anc_recon[anc_recon$species == current_node,-1])
current_dat <- data.frame(PARi = PARi,A = current_A)
current_mod <- nls(A~phi*((1-beta*PARi)/(1+gamma*PARi))*(PARi-Icomp),data = current_dat,start = c(phi=.0756,beta=0,gamma=.0039,Icomp=22.5))
fitted_A <- predict(current_mod,newdata = data.frame(PARi = PARi_fine))
} else
{
current_mod <- unlist(nls_BM_recon[nls_BM_recon$species == current_node,-1])
fitted_A <- with(data = as.list(current_mod),expr = phi*((1-beta*PARi_fine)/(1+gamma*PARi_fine))*(PARi_fine-Icomp))
}
plot_fn <- if(add) points else plot
plot_fn(x = PARi_fine,
y = fitted_A,
type = type, # type = 'l' means to plot a line instead of points
xlab = "PARi",
ylab = "A",
main = current_node, # title
ylim = range(anc_recon[,-1]), # make the y plotting span the range of all observed values so curves are comparable
lwd = lwd, # line width (default = 1, 3 is thicker, etc)
lty = lty, # line type: options include solid (lty = 1) dashed(lty = 2) dotted(lty = 3)
col = col) # set color of line
}
# example: plot H. annuus mean curve based on values
plot_curve("H.annuus",values = TRUE,col = "blue",lwd = 3,lty = 2)
# now overlay the H. annuus curve based on mean nls coefficients (overlay by setting add = TRUE)
plot_curve("H.annuus",values = FALSE,col = "red",lwd = 3,lty = 2,add = TRUE)
# Example for loop to plot every curve individually (including ancestral nodes)
for(i in 1:length(species_and_nodes))
# Example for loop to plot every curve individually (including ancestral nodes)
for(i in 1:length(species_and_nodes))
# raw species average
merge(dat %>% filter(complete.cases(.)),LH,by="species") %>%
filter(species %in% tree$tip.label) %>%
group_by(species) %>%
summarize(
A = predict(
nls(formula = A~phi*((1-beta*PARi)/(1+gamma*PARi))*(PARi-Icomp),
start = c(phi=.0756,beta=0,gamma=.0039,Icomp=22.5)),
newdata = data.frame(PARi=PARi_fine)),
LH = lifehist_2cats[1]) %>%
mutate(PARi=PARi_fine) %>%
ungroup() %>%
ggplot(mapping=aes(x = PARi,y = A,color=LH,shape=species)) +
stat_smooth(se = FALSE) +
theme_classic(base_size = 15) +
labs(color = "Life History")
# "star phylogeny" (shrinkage) reconstruction based on treating A at each PARi as separate traits
star_mv_anc_recon_long |>
merge(y = LH,by="species") |>
filter(species %in% tree$tip.label) |>
group_by(species) |>
summarize(
A = predict(
nls(formula = A~phi*((1-beta*PARi)/(1+gamma*PARi))*(PARi-Icomp),
start = c(phi=.0756,beta=0,gamma=.0039,Icomp=22.5)),
newdata = data.frame(PARi=PARi_fine)),
LH = lifehist_2cats[1]) |>
mutate(PARi=PARi_fine) |>
ungroup() |>
ggplot(mapping=aes(x = PARi,y = A,color=LH,shape=species)) +
stat_smooth(se = FALSE) +
theme_classic(base_size = 15) +
labs(color = "Life History")
# BM reconstruction based on treating A at each PARi as separate traits
BM_mv_anc_recon_long |>
merge(y = LH,by="species") |>
filter(species %in% tree$tip.label) |>
group_by(species) |>
summarize(
A = predict(
nls(formula = A~phi*((1-beta*PARi)/(1+gamma*PARi))*(PARi-Icomp),
start = c(phi=.0756,beta=0,gamma=.0039,Icomp=22.5)),
newdata = data.frame(PARi=PARi_fine)),
LH = lifehist_2cats[1]) |>
mutate(PARi=PARi_fine) |>
ungroup() |>
ggplot(mapping=aes(x = PARi,y = A,color=LH,shape=species)) +
stat_smooth(se = FALSE) +
theme_classic(base_size = 15) +
labs(color = "Life History")
library(Rphylopars)
source("R/load_data.R")
source("R/mv.R")
# If resuming the analysis, start with the following code, and skip to line 1445
load(file = "saved_state_1_25_2024.RData")
# Compare results from all equations at once
eqX <- paste("eq",c(1,2,3,4,5,6,8,9,11),sep = "")
par_names <- c(names(eq9(return = "calc")),"beta","gamma")
# Create an array of results
res <- array(dim = c(9,length(par_names)+length(PARi),length(inds)))
dimnames(res) <- list(paste("eq",c(1:6,8:9,11),sep = ""),c(par_names,paste("PAR_",PARi,sep="")),inds)
mse <- r2 <- matrix(NA,nrow = length(inds),ncol = 9,dimnames = list(inds,eqX))
for(e in 1:9)
{
for(i in 1:length(inds))
{
try({
out <- get(eqX[e])(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")
res[e,,i] <- c(out$calc[par_names],out$pred_fine[which(PARi_fine %in% PARi)])
r2[i,e] <- out$fit[["r2"]]
mse[i,e] <- out$fit[["mse"]]
},silent = TRUE)
}
}
res
r2
mse
res_vs_res_BM <- t(sapply(1:9,function(i) sapply(1:ncol(res),function(j) cor(res[i,j,],res_i_BM[i,j,],use = "pair"))))
colnames(res_vs_res_BM) <- colnames(res)
rownames(res_vs_res_BM) <- rownames(res)
pars <- c("Pmax_obs","Pgmax","phi_I0","phi_Icomp","phi_I0_Icomp","phi_Icomp_I200","Rd","Icomp",
"I15","I25","I85","I95",
"PAR_0","PAR_50","PAR_100","PAR_250","PAR_500","PAR_1000","PAR_1500","PAR_2000","PAR_2500")
res_vs_res_BM
# Does photosynthetic rate at different light levels exhibit phylogenetic signal?
# test phylogenetic signal at each level
data.frame(PARi = PARi,phy_signal =
sapply(2:ncol(dat_long),function(i) phylopars(dat_long[,c(1,i)],tree,model = 'lambda')$model$lambda))
dat_long=as.data.frame(dat_long)
vals <- sapply(1:length(inds),function(i) get(eq)(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")$pred_fine[PARi_fine%in%seq(0,2500,by = 50)])
# Which NLS model best fits photosynthetic light response curves in sunflowers?
# fit 9 different model types; table comparing average mse and r2; representative figure
eq <- "eq6"
mse[,eq]
r2[,eq]
dat_long=as.data.frame(dat_long)
vals <- sapply(1:length(inds),function(i) get(eq)(dat = dat[dat$SpeciesRepDate==inds[i],],return = "all")$pred_fine[PARi_fine%in%seq(0,2500,by = 50)])
a=sapply(1:nrow(vals),function(i) {
phy_fit <- phylopars(data.frame(species=ind_species,trait=vals[i,]),tree,model='lambda')
phy_fit$model$lambda
# phy_fit$pars[[1]]/(phy_fit$pars[[1]]+phy_fit$pars[[2]])
})
vals
phylo_fit <- phylopars(data.frame(species = ind_species,trait = res[eq,"phi_Icomp_I200",]),tree = tree,model = 'lambda')
range(phylo_fit$anc_recon[,1])
range(res[eq,"phi_I0",])
plot(tree)
plot(tree)
nodelabels(frame = "none",col = "red")
# Pgmax
phylo_fit <- phylopars(data.frame(species = ind_species,trait = res[eq,"Pgmax",]),tree = tree,model = 'lambda')
range(phylo_fit$anc_recon[,1])
range(res[eq,"Pgmax",])
# Pmax_obs
phylo_fit <- phylopars(data.frame(species = ind_species,trait = res[eq,"Pmax_obs",]),tree = tree,model = 'lambda')
range(phylo_fit$anc_recon[,1])
range(res[eq,"Pmax_obs",])
# PAR_2500
phylo_fit <- phylopars(data.frame(species = ind_species,trait = res[eq,"PAR_2500",]),tree = tree,model = 'lambda')
range(phylo_fit$anc_recon[,1])
range(res[eq,"PAR_2500",])
library(Rphylopars)
source("R/load_data.R")
source("R/mv.R")
# If resuming the analysis, start with the following code, and skip to line 1445
load(file = "saved_state_1_25_2024.RData")
